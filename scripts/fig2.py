# Copyright 2025 Thousand Brains Project
#
# Copyright may exist in Contributors' modifications
# and/or contributions to the work.
#
# Use of this source code is governed by the MIT
# license that can be found in the LICENSE file or at
# https://opensource.org/licenses/MIT.
"""This module defines functions used to generate images for figure 2.

Panel B contains three rows generated by the following functions:
 - `plot_object_views("potted_meat_can", background="gradient")`
 - `plot_dist_agent_pretraining_epochs()`
 - `plot_surf_agent_pretraining_epochs()`

Running the above functions requires that the following experiments have been run:
 - `view_finder_base_highres`: For plotting views of the object (potted_meat_can).
 - `dist_agent_1lm_checkpoints`: For plotting the distant agent's partially trained
   object models of the `potted_meat_can`.
 - `fig2_surf_agent_1lm_checkpoints`: For plotting the surface agent's partially
   trained object models of the `potted_meat_can`.

 NOTE: `plot_object_views("mug", background="white")` is also used to generates an
 image of the mug used in figure 1.
"""

import json
import os

import matplotlib.pyplot as plt
import numpy as np
from data_utils import (
    DMC_ANALYSIS_DIR,
    VISUALIZATION_RESULTS_DIR,
    load_object_model,
)
from matplotlib.figure import Figure
from plot_utils import (
    add_gradient_background,
    add_solid_background,
    axes3d_clean,
    axes3d_set_aspect_equal,
    init_matplotlib_style,
)

init_matplotlib_style()

OUT_DIR = DMC_ANALYSIS_DIR / "fig2"
OUT_DIR.mkdir(parents=True, exist_ok=True)


def plot_object_views(
    object_name: str,
    background: str = "gradient",
    vmin: float = 0.6,
    vmax: float = 0.8,
) -> None:
    """Plot view finder images of an object.

    Requires the experiment `view_finder_base_highres` has been run.

    Output is saved to `DMC_ANALYSIS_DIR/fig2/object_views/OBJECT_NAME/`.

    Args:
        object_name: The name of the object to plot.
        background: The background to use for the plot.
        vmin: The minimum value for the gradient background.
        vmax: The maximum value for the gradient background.
    """
    # Initialize input and output paths.
    data_dir = VISUALIZATION_RESULTS_DIR / "fig2_object_views/view_finder_rgbd"
    png_dir = OUT_DIR / f"object_views/{object_name}/png"
    svg_dir = OUT_DIR / f"object_views/{object_name}/svg"
    png_dir.mkdir(parents=True, exist_ok=True)
    svg_dir.mkdir(parents=True, exist_ok=True)

    # Load 'episodes.jsonl' to get info about potted_meat_can episodes.
    episodes = []
    with open(os.path.join(data_dir, "episodes.jsonl"), "r") as f:
        for line in f:
            episode = json.loads(line)
            episode_num = episode["episode"]
            name = episode["object"]
            if name != object_name:
                continue
            rotation = episode["rotation"]
            episodes.append((episode_num, object_name, rotation))

    # Plot each image as its own figure.
    for i, episode in enumerate(episodes):
        episode_number = episode[0]

        # Load the rgbd image, and alpha mask out any pixels that have a depth
        # greater than 0.9. We do this because we want to replace the black
        # background with something more visually appealing.
        rgbd = np.load(os.path.join(data_dir, f"arrays/{episode_number}.npy"))
        depth = rgbd[:, :, 3]
        rgba = rgbd.copy()
        rgba[:, :, 3] = 1
        masked = np.argwhere(depth > 0.9)
        rgba[masked[:, 0], masked[:, 1], 3] = 0

        # Put the image on a background.
        if background == "gradient":
            image = add_gradient_background(rgba, vmin=vmin, vmax=vmax)
        else:
            image = add_solid_background(rgba, background)

        fig = Figure(figsize=(1, 1))
        ax = fig.add_subplot(1, 1, 1)
        ax.imshow(image)
        ax.axis("off")
        fig.tight_layout(pad=0)
        fig.savefig(png_dir / f"{i}.png")
        fig.savefig(svg_dir / f"{i}.svg", bbox_inches="tight", pad_inches=0)
        plt.show()


def plot_dist_agent_pretraining_epochs():
    """Plot the distant agent's partially trained 3D models of `potted_meat_can`.

    Requires the experiment `dist_agent_1lm_checkpoints` has been run.

    Output is saved to `DMC_ANALYSIS_DIR/fig2/pretraining_epochs`.
    """
    # Initialize output paths.
    out_dir = OUT_DIR / "pretraining_epochs"
    out_dir.mkdir(parents=True, exist_ok=True)

    # Plot the object models.
    fig, axes = plt.subplots(2, 7, figsize=(10, 5), subplot_kw={"projection": "3d"})
    axes = axes.flatten()
    for i, ax in enumerate(axes.flatten()):
        obj = load_object_model(
            "dist_agent_1lm_checkpoints", "potted_meat_can", checkpoint=i + 1
        )
        obj -= np.array([0.0, 1.5, 0.0])
        ax.scatter(obj.x, obj.y, obj.z, c=obj.rgba, s=5, alpha=0.5, edgecolors="none")
        ax.set_proj_type("persp", focal_length=1)
        axes3d_clean(ax, grid=False)
        axes3d_set_aspect_equal(ax)
        ax.view_init(115, -50, 40)
        ax.set_xlim(-0.055, 0.055)
        ax.set_ylim(-0.055, 0.055)
        ax.set_zlim(-0.055, 0.055)
    fig.tight_layout()
    fig.savefig(out_dir / "distant_agent.png", bbox_inches="tight", dpi=300)
    fig.savefig(out_dir / "distant_agent.svg", bbox_inches="tight", pad_inches=0)
    plt.show()


def plot_surf_agent_pretraining_epochs():
    """Plot the surface agent's partially trained 3D models of `potted_meat_can`.

    Requires the experiment `fig2_surf_agent_1lm_checkpoints` has been run.

    Output is saved to `DMC_ANALYSIS_DIR/fig2/pretraining_epochs`.
    """
    # Initialize output paths.
    out_dir = OUT_DIR / "pretraining_epochs"
    out_dir.mkdir(parents=True, exist_ok=True)

    # Plot the object models.
    fig, axes = plt.subplots(2, 7, figsize=(10, 5), subplot_kw={"projection": "3d"})
    axes = axes.flatten()
    for i, ax in enumerate(axes.flatten()):
        p = VISUALIZATION_RESULTS_DIR / "fig2_surf_agent_1lm_checkpoints"
        obj = load_object_model(p, "potted_meat_can", checkpoint=i + 1)
        obj -= np.array([0.0, 1.5, 0.0])
        ax.scatter(obj.x, obj.y, obj.z, c=obj.rgba, s=5, alpha=0.5, edgecolors="none")
        ax.set_proj_type("persp", focal_length=1)
        axes3d_clean(ax, grid=False)
        axes3d_set_aspect_equal(ax)
        ax.view_init(115, -50, 40)
        ax.set_xlim(-0.055, 0.055)
        ax.set_ylim(-0.055, 0.055)
        ax.set_zlim(-0.055, 0.055)
    fig.tight_layout()
    fig.savefig(out_dir / "surface_agent.png", bbox_inches="tight", dpi=300)
    fig.savefig(out_dir / "surface_agent.svg", bbox_inches="tight", pad_inches=0)
    plt.show()


if __name__ == "__main__":
    plot_object_views("potted_meat_can", background="gradient")
    plot_dist_agent_pretraining_epochs()
    plot_surf_agent_pretraining_epochs()