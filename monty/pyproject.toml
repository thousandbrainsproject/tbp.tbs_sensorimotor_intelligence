[build-system]
requires = ["setuptools >= 71.0.0"]
build-backend = "setuptools.build_meta"

[project]
authors = [
    { name = "Thousand Brains Project" }
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha", # Update this status as the code evolves
    "License :: OSI Approved :: MIT License",
    "Private :: Do Not Upload to PyPI", # Remove if you want to upload to PyPI
    "Programming Language :: Python :: 3",
]
dependencies = [
    "tbp.monty", # imported via conda (thousandbrainsproject::tbp.monty)
]
description = "Configs and code to replicate experiments from our paper, 'Thousand Brains Systems: Sensorimotor Intelligence for Rapid, Robust Learning and Inference'"
dynamic = ["version"]
license = { file = "LICENSE" }
name = "tbp.tbs_sensorimotor_intelligence"
readme = "README.md"

[project.optional-dependencies]
dev = [
    # Check for undeclared dependencies
    "deptry",

    # Python static type checker
    "mypy==1.11.2",

    # Testing, code style, etc...
    "pytest==7.1.1",
    "pytest-xdist==2.5.0",
    "pytest-cov==3.0.0",

    # Python linter and formatter
    "ruff==0.7.1",
]

[project.urls]
Repository = "https://github.com/thousandbrainsproject/tbp.tbs_sensorimotor_intelligence"
Issues = "https://github.com/thousandbrainsproject/tbp.tbs_sensorimotor_intelligence/issues"

[tool.deptry]
exclude = ["venv", "\\.venv", "\\.direnv", "\\.git", "setup\\.py"]
experimental_namespace_package = true # recognize `tbp.` prefixed packages as a namespace package
ignore = ["DEP002"]
known_first_party = [
    "configs", # experiment configurations
]


[tool.mypy]
explicit_package_bases = true
files = ["src", "tests"]
mypy_path = ["src", "tests"]
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "tbp.monty.*"
ignore_missing_imports = true # Remove once tbp.monty types are published

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -n auto"
testpaths = ["tests/unit"]
filterwarnings = [
    "ignore:.*:DeprecationWarning",
]
junit_family = "xunit1"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.format]
indent-style = "space"
line-ending = "auto"
quote-style = "double"
skip-magic-trailing-comma = false

[tool.ruff.lint]
preview = true
explicit-preview-rules = true # comment this out to check all preview rules
select = [
    "ALL",
    # Explicitly opt-in to preview rules
    "CPY001", # Missing copyright notice at top of file
    "DOC201", # return is not documented in docstring
    "DOC202", # Docstring should not have a returns section because the function doesn't return anything
    "DOC402", # yield is not documented in docstring
    "DOC403", # Docstring has a "Yields" section but the function doesn't yield anything
    "DOC501", # Raised exception {id} missing from docstring
    "DOC502", # Raised exception is not explicitly raised: {id}
    "E261", # Insert at least two spaces before an inline comment
    "E262", # Inline comment should start with '# '
    "E265", # Block comment should start with '# '
]
ignore = [
    "C4",      # C4XX: flake8-comprehensions rules (e.g., prefer comprehensions over map/filter)
    "COM812",  # COM812: trailing comma missing in comprehension
    "ISC001",  # ISC001: implicitly concatenated string literals in comprehension
    "G004",    # G004: logging-fstring (avoid f-strings in logging calls)
    "FA100",   # FA100: missing `from __future__ import annotations`
    "ANN003",  # ANN003: missing type arguments for generics
    "ANN401",  # ANN401: use explicit types instead of Any
    "TRY003",  # TRY003: avoid raising bare exceptions
    "EM102",   # EM102: f-string in exception (avoid f-strings in raise)
    "N812",    # N812: imported module name not lowercase
    "DOC501",  # DOC501: missing “Raises” section in docstring
    "RET505",  # RET505: superfluous `else` after `return`
    "D417",    # D417: parameter in docstring is undocumented
    "ANN201",  # ANN201: missing return type on public functions
    "G003",    # G003: logging-not-lazy (avoid concatenation in logging)
    "SIM114",  # SIM114: prefer context manager for open()
    "SIM118",  # SIM118: unnecessary `return None`
    "D100",    # D100: missing module-level docstring
    "ANN204",  # ANN204: missing return type on `__init__`
    "T201",    # T201: `print` found
    "ARG002",  # ARG002: unused function argument
    "PTH123",  # PTH123: use `Path.open()` instead of `open()`
    "I001",    # I001: unsorted imports (isort)
    "W291",    # W291: trailing whitespace
    "D107",    # D107: missing docstring on `__init__`
    "D205",    # D205: missing blank line after summary in docstring
    "ANN206",  # ANN206: missing return type on class methods
    "FBT001",  # FBT001: boolean positional argument in function definition
    "EM101",   # EM101: raw string literal in exception (avoid `raise Exception("msg")`)
    "PIE790",  # PIE790: unnecessary placeholder (remove `pass` or `...`)
    "RET504",  # RET504: unnecessary assignment immediately before return
    "PTH118",  # PTH118: use `Path`-based methods instead of `os.path.join()`
    "PERF401", # PERF401: replace manual loops with list comprehensions
    "W293",    # W293: blank line contains whitespace
    "DOC202",  # DOC202: extraneous Returns section in docstring
    "D101",    # D101: missing docstring in public class
    "D102",    # D102: missing docstring in public method
    "D410",    # D410: missing blank line after a section header in docstring
    "D411",    # D411: missing blank line before a section header in docstring
    "D414",    # D414: section in docstring has no content
    "F401",    # F401: imported but unused
    "PLR0911", # PLR0911: too many return statements (pylint)
    "PLR0912", # PLR0912: too many branches (pylint)
    "W292",    # W292: no newline at end of file
]

[tool.ruff.lint.per-file-ignores]
# D104: Missing docstring in public package
"__init__.py" = ["D104"]
# D100: Missing docstring in public module
# D101: Missing docstring in public class
# D102: Missing docstring in public method
# S101: Use of `assert` detected
"tests/**.py" = ["D100", "D101", "D102", "S101"]

[tool.ruff.lint.flake8-copyright]
author = "Thousand Brains Project"


[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
where = ["."]
namespaces = true